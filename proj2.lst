     1                                  [org 0x0100]
     2                                  
     3 00000000 E9140D                  jmp start
     4                                  
     5                                  ;variables ending with start1 and start2 etc contain the row number
     6                                  
     7 00000003 C800                    dimLength: dw 200 ;number of rows in screen
     8 00000005 4001                    dimWidth: dw 320 ;number of columns in screen
     9                                  
    10                                  ;buffer1: times 2000 dw 0
    11                                  
    12 00000007 4200                    backgroundEnd: dw 66 ;row number where the background ends i.e 1/3rd
    13 00000009 8700                    foregroundEnd: dw 135 ;row number where the foreground ends i.e 2/3rd
    14                                  
    15                                  
    16 0000000B 4700                    carStart1: dw 71 
    17 0000000D 6900                    carStart2: dw 105
    18                                  
    19                                  
    20 0000000F 8C00                    brickStart1: dw 140
    21 00000011 A700                    brickStart2: dw 167
    22 00000013 C200                    brickStart3: dw 194
    23                                  
    24                                  ;can be positive or negative. moves the brick left or right from center by the help of brickflag
    25 00000015 0000                    brickmove1: dw 0
    26 00000017 0000                    brickmove2: dw 0
    27 00000019 0000                    brickmove3: dw 0
    28                                  
    29                                  ;decides whether brick will be left from center or right from center
    30 0000001B 0000                    brickflag1: dw 0
    31 0000001D 0100                    brickflag2: dw 1
    32 0000001F 0000                    brickflag3: dw 0
    33                                  
    34                                  ;colors of all the bricks
    35 00000021 0E                      brickC1: db 0x0E ;yellow
    36 00000022 2B                      brickC2: db 0x2B ;orange
    37 00000023 0A                      brickC3: db 0x0A ;green
    38                                  
    39                                  ;decides what is the colour of the new brick and it goes in brickC1
    40 00000024 0000                    brickColourRandom: dw 0
    41                                  
    42                                  ;decides brick speed i.e how much is added or subtracted to brickmove
    43 00000026 0300                    brickSpeed: dw 3
    44                                  
    45                                  ;check if blue brick already present for increasing count and setting count
    46 00000028 0000                    blueBrickFlag: dw 0
    47                                  
    48                                  ;count that acts as timer for blue brick
    49 0000002A 0000                    blueBrickCount: dw 0
    50                                  
    51                                  
    52 0000002C B300                    rabbitStart: dw 179
    53                                  
    54                                  ;can be positive or negative. moves the rabbit left or right from center. We use brickflag3 as rabbitflag as rabbit will always be on brick3
    55 0000002E 0000                    rabbitMove: dw 0
    56                                  
    57                                  
    58 00000030 A400                    carrotStart: dw 164
    59                                  
    60                                  ;decides if carrot will be generated or not
    61 00000032 0000                    carrotRandom: dw 0
    62                                  
    63                                  ;can be positive or negative. moves the carrot left or right from center by the help of carrotMoveFlag and is randomly generated
    64 00000034 0000                    carrotMoveRand: dw 0
    65                                  
    66                                  ;decides whether the carrot will be left from center or right from center
    67 00000036 0000                    carrotMoveFlag: dw 0
    68                                  
    69                                  
    70 00000038 00000000                oldisr1: dd 0 ;kbisr
    71                                  
    72 0000003C 00000000                oldisr2: dd 0 ;timer
    73                                  
    74 00000040 0000                    score: dw 0 ;contains current score
    75                                  
    76 00000042 0100                    scoreflag: dw 1 ;flag that determines if score would be incremented
    77                                  
    78 00000044 0000                    tickcount: dw 0 ;current number of seconds in timer
    79                                  
    80 00000046 0000                    tickdel: dw 0 ;when 18, 1 second is passed and tickcount is incremented
    81                                  
    82 00000048 0000                    escape: dw 0 ;if 1, it means game is paused
    83                                  
    84 0000004A 0000                    gameEnd: dw 0 ;if 1, game will end
    85                                  
    86 0000004C 0000                    random: dw 0 ;value stored in this variable after rand function is called
    87                                  
    88                                  
    89                                  ;starting prompts
    90 0000004E 57656C636F6D652074-     prompt1: db "Welcome to Rabbit Jump!", $ ;23
    90 00000057 6F2052616262697420-
    90 00000060 4A756D7021[4E]     
    91 00000066 4B656570206A756D70-     prompt2: db "Keep jumping and catching those carrots!", $ ;40
    91 0000006F 696E6720616E642063-
    91 00000078 61746368696E672074-
    91 00000081 686F73652063617272-
    91 0000008A 6F747321[66]       
    92 0000008F 41696D20666F722061-     prompt3: db "Aim for a high score!", $ ;21
    92 00000098 20686967682073636F-
    92 000000A1 726521[8F]         
    93 000000A5 476F6F644C75636B21-     prompt4: db "GoodLuck! Game will start shortly...", $ ;36
    93 000000AE 2047616D652077696C-
    93 000000B7 6C2073746172742073-
    93 000000C0 686F72746C792E2E2E-
    93 000000C9 [A5]               
    94 000000CA 5A697961642032324C-     prompt5: db "Ziyad 22L-6855", $ ;14
    94 000000D3 2D36383535[CA]     
    95 000000D9 496D616E202032324C-     prompt6: db "Iman  22L-6854", $ ;14
    95 000000E2 2D36383534[D9]     
    96                                  
    97                                  ;ending prompts
    98 000000E8 47414D45204F564552-     prompt7: db "GAME OVER!", $ ;10
    98 000000F1 21[E8]             
    99 000000F3 53434F52453A20[F3]      prompt8: db "SCORE: ", $ ;7
   100 000000FB 50726F6772616D2077-     prompt10: db "Program will terminate shortly...", $ ;33
   100 00000104 696C6C207465726D69-
   100 0000010D 6E6174652073686F72-
   100 00000116 746C792E2E2E[FB]   
   101                                  
   102                                  ;pause screen prompt
   103 0000011D 507265737320457363-     prompt9: db "Press Esc again to quit. Press Enter to continue", $ ;48
   103 00000126 20616761696E20746F-
   103 0000012F 20717569742E205072-
   103 00000138 65737320456E746572-
   103 00000141 20746F20636F6E7469-
   103 0000014A 6E7565[1D]         
   104                                  
   105 0000014E 53636F72653A            scoreP: db "Score:"
   106                                  
   107 00000154 54696D65723A            timeP: db "Timer:"
   108                                  
   109 0000015A 0000                    brickChance: dw 0
   110                                  
   111                                  ;--------------------------------------------------USEFUL FUNCTIONS------------------------------------------------------------------
   112                                  clrscr:
   113 0000015C 06                      	push es
   114 0000015D 50                      	push ax
   115 0000015E 57                      	push di
   116 0000015F 53                      	push bx
   117                                  	
   118 00000160 B800A0                  	mov ax, 0xA000
   119 00000163 8EC0                    	mov es, ax
   120 00000165 31FF                    	xor di, di
   121                                  	
   122 00000167 B300                    	mov bl, 0x00
   123 00000169 A1[0500]                	mov ax, [dimWidth]
   124 0000016C F726[0300]              	mul word[dimLength]
   125                                  	
   126 00000170 26881D                  	nextPixel: mov [es:di], bl
   127 00000173 47                      		inc di
   128 00000174 39C7                    		cmp di, ax
   129 00000176 75F8                    		jne nextPixel
   130                                  		
   131 00000178 5B                      	pop bx
   132 00000179 5F                      	pop di
   133 0000017A 58                      	pop ax
   134 0000017B 07                      	pop es
   135 0000017C C3                      	ret
   136                                  	
   137                                  	
   138                                  clrscr3b:
   139 0000017D 06                      	push es
   140 0000017E 50                      	push ax
   141 0000017F 57                      	push di
   142 00000180 53                      	push bx
   143                                  	
   144 00000181 B800A0                  	mov ax, 0xA000
   145 00000184 8EC0                    	mov es, ax
   146 00000186 BF00AA                  	mov di, 43520
   147                                  	
   148 00000189 B300                    	mov bl, 0x00
   149 0000018B A1[0500]                	mov ax, [dimWidth]
   150 0000018E F726[0300]              	mul word[dimLength]
   151                                  	
   152 00000192 26881D                  	nextPixel3b: mov [es:di], bl
   153 00000195 47                      		inc di
   154 00000196 39C7                    		cmp di, ax
   155 00000198 75F8                    		jne nextPixel3b
   156                                  		
   157 0000019A 5B                      	pop bx
   158 0000019B 5F                      	pop di
   159 0000019C 58                      	pop ax
   160 0000019D 07                      	pop es
   161 0000019E C3                      	ret
   162                                  	
   163                                  rand:
   164 0000019F 55                      	push bp
   165 000001A0 89E5                    	mov bp, sp
   166 000001A2 60                      	pusha
   167                                  	
   168 000001A3 0F31                    	rdtsc ;this command brings a random value to ax by reading time stamp counter
   169 000001A5 31D2                    	xor  dx, dx
   170 000001A7 8B4E04                  	mov  cx, [bp+4]
   171 000001AA F7F1                    	div  cx
   172 000001AC 2E8816[4C00]            	mov [cs:random],dl
   173                                  
   174 000001B1 61                      	popa 
   175 000001B2 5D                      	pop bp
   176 000001B3 C20200                  	ret 2
   177                                  
   178                                  delay:
   179 000001B6 51                      	push cx
   180 000001B7 50                      	push ax
   181 000001B8 53                      	push bx
   182                                  	
   183 000001B9 B83200                  	mov ax, 50
   184 000001BC 31DB                    	xor bx, bx
   185                                  	
   186                                  	time:
   187 000001BE B9FFFF                  		mov cx, 0xffff
   188                                  		time1:
   189 000001C1 E2FE                    			loop time1
   190 000001C3 43                      		inc bx
   191 000001C4 39C3                    		cmp bx, ax
   192 000001C6 75F6                    		jne time
   193                                  	
   194 000001C8 5B                      	pop bx
   195 000001C9 58                      	pop ax
   196 000001CA 59                      	pop cx
   197 000001CB C3                      	ret
   198                                  	
   199                                  shiftScreenRight:
   200 000001CC 55                      		push bp
   201 000001CD 89E5                    		mov bp, sp
   202 000001CF 52                      		push dx
   203 000001D0 50                      		push ax
   204 000001D1 06                      		push es
   205 000001D2 1E                      		push ds
   206 000001D3 51                      		push cx
   207 000001D4 83EC02                  		sub sp, 2
   208                                  		
   209 000001D7 BA3C00                  		mov dx,60;number of rows
   210                                  		
   211 000001DA B800A0                  		mov ax,0xA000
   212 000001DD 8EC0                    		mov es,ax
   213 000001DF 8ED8                    		mov ds,ax
   214                                  		
   215                                  		
   216                                  		;starting pixels
   217 000001E1 BE3E0B                  		mov si,2878
   218 000001E4 BF3F0B                  		mov di,2879
   219                                  	
   220                                  	loopShiftRight:	
   221                                  		
   222 000001E7 268A05                  		mov al, [es:di]
   223 000001EA 8846FE                  		mov [bp - 2], al
   224 000001ED B93F01                  		mov cx, 319
   225                                  		
   226                                  		nextShiftRight:
   227 000001F0 A4                      			movsb
   228 000001F1 83EE02                  			sub si, 2
   229 000001F4 83EF02                  			sub di, 2
   230 000001F7 E2F7                    			loop nextShiftRight
   231                                  			
   232 000001F9 8A46FE                  		mov al, [bp - 2]
   233 000001FC 268805                  		mov [es:di], al
   234 000001FF 81C63F01                		add si, 319
   235 00000203 81C73F01                		add di, 319
   236 00000207 81C64001                		add si, 320
   237 0000020B 81C74001                		add di, 320
   238 0000020F 83EA01                  		sub dx, 1
   239 00000212 75D3                    		jnz loopShiftRight
   240                                  		
   241 00000214 83C402                  	add sp,2
   242 00000217 59                      	pop cx
   243 00000218 1F                      	pop ds
   244 00000219 07                      	pop es
   245 0000021A 58                      	pop ax
   246 0000021B 5A                      	pop dx
   247 0000021C 5D                      	pop bp
   248 0000021D C3                      	ret
   249                                  		
   250                                  shiftScreenLeft:
   251 0000021E 55                      		push bp
   252 0000021F 89E5                    		mov bp, sp
   253 00000221 52                      		push dx
   254 00000222 50                      		push ax
   255 00000223 06                      		push es
   256 00000224 1E                      		push ds
   257 00000225 51                      		push cx
   258 00000226 83EC02                  		sub sp, 2
   259                                  		
   260 00000229 BA1B00                  		mov dx, 27 ;number of rows
   261 0000022C B800A0                  		mov ax, 0xA000
   262 0000022F 8EC0                    		mov es, ax
   263 00000231 8ED8                    		mov ds, ax
   264                                  		
   265                                  		;starting pixels
   266 00000233 8B7604                  		mov si, [bp + 4]
   267 00000236 46                      		inc si
   268 00000237 8B7E04                  		mov di, [bp + 4]
   269                                  	
   270                                  	loopShiftLeft:	
   271                                  		
   272 0000023A 268A05                  		mov al, [es:di]
   273 0000023D 8846FE                  		mov [bp-2], al
   274 00000240 B93F01                  		mov cx, 319
   275                                  		
   276 00000243 F3A4                    		rep movsb
   277                                  		
   278 00000245 8A46FE                  		mov al, [bp - 2]
   279 00000248 268805                  		mov [es:di], al
   280                                  		
   281 0000024B 81EE3F01                		sub si, 319
   282 0000024F 81EF3F01                		sub di, 319
   283 00000253 81C64001                		add si, 320	
   284 00000257 81C74001                		add di, 320
   285 0000025B 83EA01                  		sub dx, 1
   286 0000025E 75DA                    		jnz loopShiftLeft
   287                                  		
   288                                  		
   289 00000260 83C402                  	add sp,2
   290 00000263 59                      	pop cx
   291 00000264 1F                      	pop ds
   292 00000265 07                      	pop es
   293 00000266 58                      	pop ax
   294 00000267 5A                      	pop dx
   295 00000268 5D                      	pop bp
   296 00000269 C20200                  	ret 2
   297                                  		
   298                                  ShiftScreenDown:
   299                                  	
   300 0000026C 55                      	push bp
   301 0000026D 89E5                    	mov bp,sp
   302 0000026F 1E                      	push ds
   303 00000270 06                      	push es
   304 00000271 50                      	push ax
   305 00000272 53                      	push bx
   306 00000273 51                      	push cx
   307 00000274 52                      	push dx
   308 00000275 56                      	push si
   309 00000276 57                      	push di
   310                                  
   311                                  	
   312 00000277 B800A0                  	mov ax,0xA000
   313 0000027A 8EC0                    	mov es,ax
   314 0000027C 8ED8                    	mov ds,ax
   315                                  
   316 0000027E FD                      	std ;set auto decrement mode
   317                                  
   318 0000027F BB1A00                  	mov bx,26 ;how many times we need to shift down
   319                                  	
   320                                  	loop24:
   321 00000282 BFFFF9                  		mov di,63999
   322 00000285 BEBFF8                  		mov si, 63679
   323 00000288 BA3C00                  		mov dx,60 ;rows starting from last that we need to shift down
   324                                  		loop23:
   325 0000028B B94001                  			mov cx,320
   326 0000028E F3A4                    			rep movsb
   327 00000290 83EA01                  			sub dx,1
   328 00000293 75F6                    			jnz loop23
   329 00000295 83EB01                  		sub bx,1
   330 00000298 75E8                    	jnz loop24
   331                                  	
   332 0000029A FC                      	cld;set auto increment mode
   333                                  	
   334 0000029B 5F                      	pop di
   335 0000029C 5E                      	pop si
   336 0000029D 5A                      	pop dx
   337 0000029E 59                      	pop cx
   338 0000029F 5B                      	pop bx
   339 000002A0 58                      	pop ax
   340 000002A1 07                      	pop es
   341 000002A2 1F                      	pop ds
   342 000002A3 5D                      	pop bp
   343 000002A4 C3                      	ret 
   344                                  	
   345                                  ShiftScreenUp:
   346                                  
   347 000002A5 55                      	push bp
   348 000002A6 89E5                    	mov bp,sp
   349 000002A8 1E                      	push ds
   350 000002A9 06                      	push es
   351 000002AA 50                      	push ax
   352 000002AB 53                      	push bx
   353 000002AC 51                      	push cx
   354 000002AD 52                      	push dx
   355 000002AE 56                      	push si
   356 000002AF 57                      	push di
   357                                  	
   358 000002B0 FB                      	sti ;set interupts for timer
   359                                  	
   360                                  	;2 blue conseq
   361 000002B1 C706[2A00]0000          	mov word [blueBrickCount], 0 ; every jump resets timer count of blue brick
   362 000002B7 C706[2800]0000          	mov word [blueBrickFlag], 0 ; every jump resets if blue
   363                                  	
   364                                  	;to avoid stack problems
   365 000002BD 8CC8                    	mov ax,cs
   366 000002BF 8ED8                    	mov ds,ax
   367                                  	
   368                                  	;shift rabbit up before calling shiftscreendown a total of 27 rows
   369 000002C1 832E[2C00]03            	sub word [rabbitStart], 3 ;outside loop as 27 is an odd number
   370                                  	
   371 000002C6 B90600                  	mov cx, 6
   372                                  	loopmov:
   373 000002C9 832E[2C00]04            		sub word [rabbitStart], 4
   374 000002CE E8EB06                  		call ReservedSpace
   375 000002D1 E86902                  		call PrintAnimation ;so that animation doesnt stop when upkey is pressed
   376 000002D4 E2F3                    		loop loopmov
   377                                  	
   378                                  	
   379                                  	;We need to implement score checks and game over checks before changing rabbit start
   380                                  	
   381                                  	;increase score check
   382 000002D6 C706[4200]0100          	mov word [scoreflag], 1
   383                                  	
   384                                  	;right check
   385 000002DC A1[2E00]                	mov ax, [rabbitMove]
   386 000002DF 059100                  	add ax, 145
   387                                  	
   388 000002E2 BB9D00                  	mov bx, 157
   389 000002E5 83C305                  	add bx, 5;carrot length
   390 000002E8 031E[3400]              	add bx, [carrotMoveRand]
   391                                  	
   392 000002EC 39D8                    	cmp word ax, bx
   393 000002EE 7C06                    	jl skips2
   394 000002F0 C706[4200]0000          		mov word [scoreflag], 0
   395                                  	skips2:
   396                                  	
   397                                  	;left check
   398 000002F6 B89100                  	mov ax, 145
   399 000002F9 83C014                  	add ax, 20 ;rabbit length
   400 000002FC 0306[2E00]              	add ax, [rabbitMove]
   401 00000300 83EB05                  	sub bx, 5 ;carrot length
   402                                  
   403 00000303 39D8                    	cmp word ax, bx
   404 00000305 7F06                    	jg skips3
   405 00000307 C706[4200]0000          		mov word [scoreflag], 0
   406                                  	skips3:
   407                                  	
   408                                  	;if carrot does not exist, dont increase score
   409 0000030D 833E[3200]00            	cmp word [carrotRandom], 0
   410 00000312 7406                    	je CarrotGen
   411 00000314 C706[4200]0000          		mov word [scoreflag], 0
   412                                  	CarrotGen:
   413                                  	
   414                                  	
   415 0000031A 833E[4200]00            	cmp word[scoreflag], 0
   416 0000031F 7417                    	je dontincS
   417 00000321 FF06[4000]              		inc word [score] ;score is incremented
   418                                  		
   419                                  		;setting speed based on score
   420 00000325 31D2                    		xor dx, dx
   421 00000327 A1[4000]                		mov ax, [score] 
   422 0000032A BB0300                  		mov bx, 3
   423 0000032D F7F3                    		div bx
   424 0000032F 80FA00                  		cmp dl, 0
   425 00000332 7504                    		jne dontincS
   426 00000334 FF06[2600]              			inc word [brickSpeed]
   427                                  	dontincS:
   428                                  	
   429                                  	
   430                                  	;game over check
   431                                  	;left check
   432 00000338 A1[2E00]                	mov ax, [rabbitMove]
   433 0000033B 83C023                  	add ax, 35
   434 0000033E 3B06[1700]              	cmp ax, [brickmove2] ;comparing with brick 2 only as the rabbit always lands on brick2
   435 00000342 7D06                    	jge skipbb1
   436 00000344 C706[4A00]0100          		mov word [gameEnd], 1
   437                                  	skipbb1:
   438                                  		;right check
   439 0000034A 83E850                  		sub ax, 80
   440 0000034D 3B06[1700]              		cmp ax, [brickmove2]
   441 00000351 7E06                    		jle skipbb2
   442 00000353 C706[4A00]0100          			mov word [gameEnd], 1
   443                                  		skipbb2:
   444                                  		
   445                                  	
   446                                  	;shift rabbit back down
   447 00000359 E810FF                  	call ShiftScreenDown
   448                                  	
   449                                  	;original position
   450 0000035C 8306[2C00]1B            	add word [rabbitStart], 27
   451                                  	
   452                                  	
   453                                  	;shift flags down. Flag1 will be random
   454 00000361 A1[1B00]                	mov ax, [brickflag1]
   455 00000364 8B1E[1D00]              	mov bx, [brickflag2]
   456                                  	
   457 00000368 A3[1D00]                	mov word [brickflag2], ax
   458 0000036B 891E[1F00]              	mov word [brickflag3], bx
   459                                  	
   460                                  	;random flag1
   461 0000036F 6A02                    	push word 2
   462 00000371 E82BFE                  	call rand
   463 00000374 A1[4C00]                	mov ax, [random]
   464 00000377 A3[1B00]                	mov [brickflag1], ax
   465                                  	
   466                                  	;shift down current locations i.e column of each brick. brickmove1 will be randomly generated
   467 0000037A A1[1500]                	mov word ax, [brickmove1]
   468 0000037D 8B1E[1700]              	mov word bx, [brickmove2]
   469                                  	
   470 00000381 A3[1700]                	mov word [brickmove2], ax
   471 00000384 891E[1900]              	mov word [brickmove3], bx
   472                                  	
   473                                  	;random brickmove1
   474                                  	
   475 00000388 6A02                    	push word 2
   476 0000038A E812FE                  	call rand
   477 0000038D A1[4C00]                	mov ax, [random]
   478 00000390 A3[5A01]                	mov [brickChance], ax
   479                                  	
   480 00000393 6A28                    	push word 40
   481 00000395 E807FE                  	call rand
   482 00000398 A1[4C00]                	mov ax, [random]
   483 0000039B 833E[5A01]01            	cmp word [brickChance], 1 ;brickflag1 becasue 1/2 chance
   484 000003A0 7505                    	jne minusPos
   485 000003A2 A3[1500]                		mov [brickmove1], ax
   486 000003A5 EB08                    		jmp plusPos
   487                                  	minusPos:
   488 000003A7 31DB                    		xor bx, bx
   489 000003A9 29C3                    		sub bx, ax
   490 000003AB 891E[1500]              		mov [brickmove1], bx
   491                                  	
   492                                  	plusPos:
   493                                  	
   494                                  	
   495                                  	;shift colours down. colour1 will be random
   496 000003AF A0[2100]                	mov byte al, [brickC1]
   497 000003B2 8A1E[2200]              	mov byte bl,[brickC2]
   498                                  	
   499 000003B6 A2[2200]                	mov byte  [brickC2], al
   500 000003B9 881E[2300]              	mov byte  [brickC3], bl
   501                                  	
   502                                  	;random colour1
   503 000003BD 6A04                    	push word 4
   504 000003BF E8DDFD                  	call rand
   505                                  	
   506 000003C2 A1[4C00]                	mov ax, [random]
   507 000003C5 A3[2400]                	mov [brickColourRandom], ax
   508                                  	
   509 000003C8 833E[2400]00            	cmp word [brickColourRandom], 0
   510 000003CD 7415                    	je bc1
   511 000003CF 833E[2400]01            	cmp word [brickColourRandom], 1
   512 000003D4 7415                    	je bc2
   513 000003D6 833E[2400]02            	cmp word [brickColourRandom], 2
   514 000003DB 7415                    	je bc3
   515 000003DD 833E[2400]03            	cmp word [brickColourRandom], 3
   516 000003E2 7415                    	je bc4
   517                                  	
   518                                  	
   519                                  	bc1:
   520 000003E4 C606[2100]0E            		mov byte [brickC1], 0x0E ;yellow
   521 000003E9 EB15                    		jmp skipbbb
   522                                  		
   523                                  	bc2:
   524 000003EB C606[2100]2B            		mov byte [brickC1], 0x2B ;orange
   525 000003F0 EB0E                    		jmp skipbbb
   526                                  		
   527                                  	bc3:
   528 000003F2 C606[2100]0A            		mov byte [brickC1], 0x0A ;green
   529 000003F7 EB07                    		jmp skipbbb
   530                                  		
   531                                  	bc4:
   532 000003F9 C606[2100]37            		mov byte [brickC1], 0x37 ;blue
   533 000003FE EB00                    		jmp skipbbb
   534                                  	
   535                                  	skipbbb:
   536                                  	
   537                                  	
   538                                  	;random carrot print
   539 00000400 6A03                    	push word 3
   540 00000402 E89AFD                  	call rand
   541                                  	
   542 00000405 A1[4C00]                	mov ax, [random]
   543 00000408 A3[3200]                	mov [carrotRandom], ax
   544                                  	
   545                                  	;random carrot position in row
   546 0000040B 6A02                    	push 2
   547 0000040D E88FFD                  	call rand
   548 00000410 A1[4C00]                	mov ax, [random]
   549 00000413 A3[3600]                	mov [carrotMoveFlag], ax
   550                                  	
   551 00000416 6A28                    	push word 40
   552 00000418 E884FD                  	call rand
   553 0000041B A1[4C00]                	mov ax, [random]
   554                                  	
   555 0000041E 833E[3600]00            	cmp word [carrotMoveFlag], 0
   556 00000423 7405                    	je carrotLeftRand
   557 00000425 A3[3400]                		mov [carrotMoveRand], ax
   558 00000428 EB08                    		jmp carrotRightRand
   559                                  	
   560                                  	carrotLeftRand:
   561 0000042A 31DB                    		xor bx, bx
   562 0000042C 29C3                    		sub bx, ax
   563 0000042E 891E[3400]              		mov [carrotMoveRand], bx
   564                                  		
   565                                  	carrotRightRand:
   566                                  	
   567                                  	
   568                                  	
   569 00000432 FA                      	cli
   570                                  	
   571 00000433 5F                      	pop di
   572 00000434 5E                      	pop si
   573 00000435 5A                      	pop dx
   574 00000436 59                      	pop cx
   575 00000437 5B                      	pop bx
   576 00000438 58                      	pop ax
   577 00000439 07                      	pop es
   578 0000043A 1F                      	pop ds
   579 0000043B 5D                      	pop bp
   580 0000043C C3                      	ret
   581                                  	
   582                                  kbisr:
   583 0000043D 06                      	push es
   584 0000043E 60                      	pusha
   585                                  	
   586                                  	
   587 0000043F E460                    	in al, 0x60 ; read a char from keyboard port
   588 00000441 3C48                    	cmp al, 0x48 ; upkey
   589 00000443 743E                    	je upk
   590 00000445 3C01                    	cmp al, 1 ;escape
   591 00000447 740B                    	je PrintConfirm
   592 00000449 3C1C                    	cmp al, 28 ;enter
   593 0000044B 741F                    	je Resume
   594                                  
   595                                  	nomatch:
   596 0000044D 61                      		popa
   597 0000044E 07                      		pop es
   598 0000044F B020                    		mov al, 0x20
   599 00000451 E620                    		out 0x20, al	; send EOI to PIC (end of interface to program interface controller)
   600 00000453 CF                      		iret; jmp far [cs:oldisr1]
   601                                  
   602                                  	PrintConfirm:
   603                                  	
   604 00000454 2E833E[4800]01          		cmp word [cs:escape], 1
   605 0000045A 7506                    		jne skipconf
   606 0000045C C706[4A00]0100          			mov word [gameEnd], 1
   607                                  
   608                                  		skipconf:
   609 00000462 E88E08                  		call PrintConfirmm
   610 00000465 B020                    		mov al, 0x20
   611 00000467 E620                    		out 0x20, al	; send EOI to PIC
   612 00000469 61                      		popa
   613 0000046A 07                      		pop es
   614 0000046B CF                      		iret ;jmp far [cs:oldisr1]
   615                                  	
   616                                  	Resume:
   617                                  		
   618 0000046C 833E[4800]01            		cmp word [escape], 1
   619 00000471 7509                    		jne Resume1
   620 00000473 C706[4800]0000          			mov word [escape], 0
   621 00000479 E8F900                  			call PrintStartScreen
   622                                  		Resume1:
   623 0000047C B020                    		mov al, 0x20
   624 0000047E E620                    		out 0x20, al	; send EOI to PIC
   625 00000480 61                      		popa
   626 00000481 07                      		pop es
   627 00000482 CF                      		iret ;jmp far [cs:oldisr1]
   628                                  		
   629                                  	upk:
   630                                  		
   631 00000483 833E[4800]01            		cmp word [escape], 1
   632 00000488 7403                    		je skipup
   633 0000048A E818FE                  			call ShiftScreenUp
   634                                  		skipup:
   635 0000048D B020                    		mov al, 0x20
   636 0000048F E620                    		out 0x20, al	; send EOI to PIC
   637 00000491 61                      		popa
   638 00000492 07                      		pop es
   639 00000493 CF                      		iret ;jmp far [cs:oldisr1]
   640                                  
   641                                  
   642                                  setkbisr:
   643 00000494 06                      	push es
   644 00000495 50                      	push ax
   645 00000496 31C0                    	xor ax, ax
   646 00000498 8EC0                    			mov es, ax
   647 0000049A 26A12400                			mov ax, [es:9*4]
   648 0000049E A3[3800]                			mov [oldisr1], ax
   649 000004A1 26A12600                			mov ax, [es:9*4+2]
   650 000004A5 A3[3A00]                			mov [oldisr1+2], ax
   651 000004A8 FA                      			cli
   652 000004A9 26C7062400[3D04]        			mov word [es:9*4], kbisr ; store offset at n*4
   653 000004B0 268C0E2600              			mov [es:9*4+2], cs ; store segment at n*4+2
   654 000004B5 FB                      			sti
   655                                  			
   656 000004B6 58                      	pop ax
   657 000004B7 07                      	pop es
   658 000004B8 C3                      	ret
   659                                  		
   660                                  timer:		
   661 000004B9 50                      	push ax
   662 000004BA 2EFF06[4600]            	inc word [cs:tickdel]
   663                                  	
   664 000004BF 2E833E[4600]12          	cmp word [cs:tickdel], 18
   665 000004C5 750B                    	jne skipdel
   666                                  		
   667 000004C7 31C0                    		xor ax, ax
   668 000004C9 2EA3[4600]              		mov [cs:tickdel], ax
   669 000004CD 2EFF06[4400]            		inc word [cs:tickcount] ;increment each second
   670                                  		
   671                                  	skipdel:
   672                                  	
   673                                  
   674 000004D2 B020                    	mov al, 0x20
   675 000004D4 E620                    	out 0x20, al ; end of interrupt
   676                                  
   677 000004D6 58                      	pop ax
   678 000004D7 CF                      	iret ; return from interrupt
   679                                  ;------------------------------------------------------
   680                                  setTimer:
   681 000004D8 06                      		push es
   682 000004D9 50                      		push ax
   683 000004DA 31C0                    			xor ax, ax
   684 000004DC 8EC0                    			mov es, ax ; point es to IVT base
   685                                  			
   686 000004DE 26A12000                			mov ax, [es:8*4]
   687 000004E2 A3[3C00]                			mov [oldisr2], ax
   688 000004E5 26A12200                			mov ax, [es:8*4+2]
   689 000004E9 A3[3E00]                			mov [oldisr2+2], ax
   690 000004EC FA                      			cli ; disable interrupts
   691 000004ED 26C7062000[B904]        			mov word [es:8*4], timer; store offset at n*4
   692 000004F4 268C0E2200              			mov [es:8*4+2], cs ; store segment at n*4+2
   693 000004F9 FB                      			sti ; enable interrupts
   694                                  
   695 000004FA 58                      		pop ax
   696 000004FB 07                      		pop es
   697 000004FC C3                      		ret
   698                                  
   699                                  printnum:
   700 000004FD 55                      	push bp
   701 000004FE 89E5                    	mov bp, sp
   702 00000500 06                      	push es
   703 00000501 60                      	pusha
   704                                  
   705                                  
   706 00000502 8B7604                  	mov si, [bp+4] ; load number in ax= 4529
   707 00000505 89F0                    	mov ax, si
   708                                  
   709 00000507 BB0A00                  	mov bx, 10 ; use base 10 for division
   710 0000050A B90000                  	mov cx, 0
   711                                  
   712 0000050D BA0000                  	nextdigit: mov dx, 0 ; zero upper half of dividend
   713 00000510 F7F3                    	div bx ; divide by 10 AX/BX --> Quotient --> AX, Remainder --> DX .....
   714 00000512 83C230                  	add dx, 0x30 ; convert digit into ascii value
   715 00000515 52                      	push dx ; save ascii value on stack
   716                                  
   717 00000516 41                      	inc cx ; increment count of values
   718 00000517 83F800                  	cmp ax, 0 ; is the quotient zero
   719 0000051A 75F1                    	jnz nextdigit ; if no divide it again
   720                                  
   721 0000051C B700                    	mov bh, 00
   722 0000051E 8A5E06                  	mov bl, [bp + 6] ;color
   723 00000521 8A560A                  	mov dl, [bp + 10] ;col
   724 00000524 8A7608                  	mov dh, [bp + 8]  ;row
   725 00000527 B402                    	mov ah, 02h    ; BIOS.SetCursorPosition - Point to the location of dx and page no. of bh
   726 00000529 CD10                    	int 10h
   727                                  
   728 0000052B 58                      	nextpos: pop ax; remove a digit from the stack
   729 0000052C B40E                    	mov ah,  0x0E
   730 0000052E CD10                    	int 10h
   731 00000530 FEC2                    	inc dl
   732 00000532 83C601                  	add si, 1
   733 00000535 E2F4                    	loop nextpos ; repeat for all digits on stack
   734                                  
   735 00000537 61                      	popa
   736 00000538 07                      	pop es
   737 00000539 5D                      	pop bp
   738 0000053A C20800                  	ret 8
   739                                  	
   740                                  ;------------------------------------------------------------ANIMATION----------------------------------------------------------------------
   741                                  PrintAnimation:
   742 0000053D 51                      	push cx
   743                                  	
   744 0000053E 31C9                    	xor cx, cx
   745                                  	
   746 00000540 B90100                  	mov cx, 1
   747                                  	
   748                                  	shiftR:
   749 00000543 833E[4800]01            	cmp word[escape],1
   750 00000548 7403                    	je skipr0
   751 0000054A E87FFC                  		call shiftScreenRight
   752                                  		skipr0:
   753 0000054D E2F4                    		loop shiftR
   754                                  		
   755 0000054F B90500                  	mov cx, 5
   756                                  	
   757                                  	shiftL1:
   758 00000552 833E[4800]01            		cmp word[escape],1
   759 00000557 7406                    	je skipl0
   760 00000559 684056                  		push word 22080
   761 0000055C E8BFFC                  		call shiftScreenLeft
   762                                  		skipl0:
   763 0000055F E2F1                    		loop shiftL1
   764                                  		
   765 00000561 B90200                  	mov cx, 2
   766                                  	
   767                                  	shiftL2:
   768 00000564 833E[4800]01            	cmp word[escape],1
   769 00000569 7406                    	je skipl2
   770 0000056B 68C080                  		push word 32960
   771 0000056E E8ADFC                  		call shiftScreenLeft
   772                                  		skipl2:
   773 00000571 E2F1                    		loop shiftL2
   774                                  	
   775 00000573 59                      	pop cx
   776 00000574 C3                      	ret
   777                                  	
   778                                  ;-----------------------------------------------------------START_SCREEN-------------------------------------------------------------------
   779                                  PrintStartScreen:
   780 00000575 E80700                  	call PrintBackground
   781 00000578 E8C500                  	call PrintForeground
   782 0000057B E83E04                  	call ReservedSpace
   783                                  	
   784 0000057E C3                      	ret
   785                                  
   786                                  
   787                                  ;------------------------------------------------------------BACKGROUND----------------------------------------------------------------------
   788                                  PrintBackground:
   789 0000057F E80400                  	call PrintSky
   790 00000582 E82300                  	call PrintMountains
   791                                  	
   792 00000585 C3                      	ret
   793                                  	
   794                                  PrintSky:
   795                                  
   796 00000586 06                      	push es
   797 00000587 50                      	push ax
   798 00000588 57                      	push di
   799 00000589 53                      	push bx
   800                                  	
   801 0000058A B800A0                  	mov ax, 0xA000
   802 0000058D 8EC0                    	mov es, ax
   803 0000058F BF0000                  	mov di, 0
   804                                  	
   805 00000592 B336                    	mov bl, 0x36
   806                                  	
   807 00000594 A1[0700]                	mov ax, [backgroundEnd]
   808 00000597 F726[0500]              	mul word [dimWidth]
   809                                  	
   810 0000059B 26881D                  	nextSkyPixel: mov [es:di], bl
   811 0000059E 47                      		inc di
   812 0000059F 39C7                    		cmp di, ax
   813 000005A1 75F8                    		jne nextSkyPixel
   814                                  		
   815 000005A3 5B                      	pop bx
   816 000005A4 5F                      	pop di
   817 000005A5 58                      	pop ax
   818 000005A6 07                      	pop es
   819 000005A7 C3                      	ret
   820                                  	
   821                                  PrintMountains:
   822                                  	
   823 000005A8 06                      	push es
   824 000005A9 50                      	push ax
   825 000005AA 57                      	push di
   826 000005AB 56                      	push si
   827 000005AC 51                      	push cx
   828 000005AD 52                      	push dx
   829 000005AE 53                      	push bx
   830                                  	
   831 000005AF B800A0                  	mov ax, 0xA000
   832 000005B2 8EC0                    	mov es, ax
   833                                  	
   834                                  	;calculate starting pixel
   835 000005B4 A1[0700]                	mov ax, [backgroundEnd]
   836 000005B7 83E801                  	sub ax, 1
   837 000005BA F726[0500]              	mul word [dimWidth]
   838                                  	
   839 000005BE 89C7                    	mov di, ax ;starting pixel
   840 000005C0 BB0800                  	mov bx, 8;number of mountains
   841                                  	
   842                                  	nextMountain:
   843 000005C3 B92800                  		mov cx, 40 ;size of mountains
   844 000005C6 88CA                    		mov dl, cl
   845                                  		firstHalfMountain:
   846 000005C8 88D6                    			mov dh, dl
   847 000005CA 89FE                    			mov si, di
   848                                  			l1:
   849                                  				;to avoid going in the next line after one last row complete
   850 000005CC 0306[0500]              				add ax, [dimWidth]
   851 000005D0 83E801                  				sub ax, 1
   852 000005D3 39C7                    				cmp di, ax
   853 000005D5 7E04                    				jle skipR1
   854 000005D7 2B3E[0500]              					sub di, [dimWidth]
   855                                  				skipR1:
   856 000005DB 2B06[0500]              					sub ax, [dimWidth]
   857 000005DF 83C001                  					add ax, 1
   858                                  
   859                                  				;printing mountain
   860 000005E2 26C6052B                				mov byte [es:di], 0x2B
   861 000005E6 47                      				inc di
   862 000005E7 FECE                    				dec dh
   863 000005E9 75E1                    				jnz l1
   864 000005EB 89F7                    			mov di, si
   865                                  			
   866                                  			;move a pixel 1 up and 1 right
   867 000005ED 2B3E[0500]              			sub di, [dimWidth]
   868 000005F1 83C701                  			add di, 1
   869                                  			
   870 000005F4 FECA                    			dec dl
   871 000005F6 E2D0                    			loop firstHalfMountain
   872                                  		
   873                                  		;nullify the last extra addition by bringing pixel 1 down and 1 left
   874 000005F8 033E[0500]              		add di, [dimWidth]
   875 000005FC 83EF01                  		sub di, 1
   876                                  		
   877 000005FF B92800                  		mov cx, 40;size of mountains
   878 00000602 B201                    		mov dl, 1
   879                                  		secondHalfMountain:
   880 00000604 88D6                    			mov dh, dl
   881 00000606 89FE                    			mov si, di
   882                                  			l2:
   883                                  				;to avoid going in the next line after last row complete
   884 00000608 0306[0500]              				add ax, [dimWidth]
   885 0000060C 83E801                  				sub ax, 1
   886 0000060F 39C7                    				cmp di, ax
   887 00000611 7E04                    				jle skipR2
   888 00000613 2B3E[0500]              					sub di, [dimWidth]
   889                                  				skipR2:
   890 00000617 2B06[0500]              					sub ax, [dimWidth]
   891 0000061B 83C001                  					add ax, 1
   892                                  					
   893                                  				;printing mountain
   894 0000061E 26C6052A                				mov byte [es:di], 0x2A
   895 00000622 47                      				inc di
   896 00000623 FECE                    				dec dh
   897 00000625 75E1                    				jnz l2
   898 00000627 89F7                    			mov di, si
   899                                  			
   900                                  			;move 1 down
   901 00000629 033E[0500]              			add di, [dimWidth]
   902 0000062D FEC2                    			inc dl
   903 0000062F E2D3                    			loop secondHalfMountain
   904                                  		
   905                                  		;nullify last addition by moving 1 up
   906 00000631 2B3E[0500]              		sub di, [dimWidth]
   907                                  		
   908 00000635 4B                      		dec bx
   909 00000636 758B                    		jnz nextMountain
   910                                  		
   911 00000638 5B                      	pop bx
   912 00000639 5A                      	pop dx
   913 0000063A 59                      	pop cx
   914 0000063B 5E                      	pop si
   915 0000063C 58                      	pop ax
   916 0000063D 5F                      	pop di	
   917 0000063E 07                      	pop es
   918 0000063F C3                      	ret
   919                                  
   920                                  	
   921                                  	
   922                                  ;-------------------------------------------------------------FOREGROUND------------------------------------------------------------------
   923                                  PrintForeground:
   924                                  
   925 00000640 E80F00                  	call PrintRoad
   926                                  	
   927 00000643 FF36[0B00]              	push word[carStart1]
   928 00000647 E89800                  	call PrintCar
   929                                  	
   930 0000064A FF36[0D00]              	push word[carStart2]
   931 0000064E E89100                  	call PrintCar
   932                                  	
   933 00000651 C3                      	ret
   934                                  
   935                                  
   936                                  PrintRoad:
   937 00000652 06                      	push es
   938 00000653 50                      	push ax
   939 00000654 57                      	push di
   940 00000655 56                      	push si
   941 00000656 53                      	push bx
   942                                  	
   943 00000657 B800A0                  	mov ax, 0xA000
   944 0000065A 8EC0                    	mov es, ax
   945                                  	
   946                                  	;for top border
   947                                  	;calculate starting pixel
   948 0000065C A1[0500]                	mov ax, [dimWidth]
   949 0000065F F726[0700]              	mul word[backgroundEnd]
   950 00000663 89C7                    	mov di, ax
   951                                  	
   952                                  	;calculate ending pixel
   953 00000665 A1[0700]                	mov ax, [backgroundEnd]
   954 00000668 83C003                  	add ax, 3
   955 0000066B F726[0500]              	mul word[dimWidth]
   956                                  	
   957                                  	
   958                                  	;print top border
   959                                  	nextblack:
   960 0000066F 26C6052B                		mov byte [es:di], 0x2B
   961 00000673 47                      		inc di
   962 00000674 39C7                    		cmp di, ax
   963 00000676 75F7                    		jne nextblack
   964                                  
   965                                  
   966                                  	;for main road
   967                                  	;calculate ending pixel
   968                                  	;starting pixel will just be di and will already have the value we need from the previous loop
   969 00000678 A1[0900]                	mov ax, [foregroundEnd]
   970 0000067B 83E803                  	sub ax, 3
   971 0000067E F726[0500]              	mul word[dimWidth]
   972                                  	
   973                                  	;print main road
   974 00000682 26C60517                	nextchar4: mov byte [es:di], 0x17
   975 00000686 47                      		inc di
   976 00000687 39C7                    		cmp di, ax
   977 00000689 75F7                    		jne nextchar4
   978                                  	
   979                                  	
   980                                  	;for bottom border
   981                                  	;calculate ending pixel 
   982                                  	;starting pixel will just be di and will already have the value we need from the previous loop
   983 0000068B A1[0900]                	mov ax, [foregroundEnd]
   984 0000068E F726[0500]              	mul word[dimWidth]
   985                                  	
   986                                  	;print bottom border
   987                                  	nextblack2:
   988 00000692 26C6052B                		mov byte [es:di], 0x2B
   989 00000696 47                      		inc di
   990 00000697 39C7                    		cmp di, ax
   991 00000699 75F7                    		jne nextblack2
   992                                  		
   993                                  	
   994                                  	;print stripes in middle
   995 0000069B A1[0900]                	mov ax, [foregroundEnd] ;135
   996 0000069E 8B3E[0700]              	mov di, [backgroundEnd] ;66
   997                                  	
   998 000006A2 29F8                    	sub ax, di
   999                                  	;divide by 2
  1000 000006A4 D1E8                    	shr ax, 1
  1001 000006A6 0306[0700]              	add ax, [backgroundEnd]
  1002 000006AA F726[0500]              	mul word[dimWidth]
  1003                                  	
  1004 000006AE 89C7                    	mov di, ax
  1005                                  	
  1006 000006B0 0306[0500]              	add ax, [dimWidth]
  1007 000006B4 83E801                  	sub ax, 1
  1008                                  
  1009                                  	middleRoad:
  1010 000006B7 89FE                    		mov si, di
  1011 000006B9 83C620                  		add si, 32;size of strips?
  1012                                  		roadColB:
  1013 000006BC 26C6050F                			mov byte [es:di], 0x0F
  1014 000006C0 26C68540010F            			mov byte [es:di + 320], 0x0F
  1015 000006C6 26C685C0FE0F            			mov byte [es:di - 320], 0x0F
  1016 000006CC 47                      			inc di
  1017                                  			;checking end of row
  1018 000006CD 39C7                    			cmp di, ax
  1019 000006CF 7D0B                    			jge skipR
  1020 000006D1 39F7                    			cmp di, si
  1021 000006D3 75E7                    			jne roadColB
  1022                                  	
  1023 000006D5 83C720                  		add di, 32
  1024 000006D8 39C7                    		cmp di, ax
  1025 000006DA 7EDB                    		jle middleRoad
  1026                                  		
  1027                                  	skipR:
  1028                                  	
  1029                                  	
  1030 000006DC 5B                      	pop bx
  1031 000006DD 5E                      	pop si
  1032 000006DE 5F                      	pop di
  1033 000006DF 58                      	pop ax
  1034 000006E0 07                      	pop es
  1035 000006E1 C3                      	ret
  1036                                  
  1037                                  PrintCar:  
  1038                                  
  1039 000006E2 55                      	push bp
  1040 000006E3 89E5                    	mov bp, sp
  1041 000006E5 06                      	push es
  1042 000006E6 50                      	push ax
  1043 000006E7 57                      	push di
  1044 000006E8 51                      	push cx
  1045 000006E9 56                      	push si
  1046 000006EA 52                      	push dx
  1047 000006EB 53                      	push bx
  1048                                  	
  1049 000006EC B800A0                  	mov ax, 0xA000
  1050 000006EF 8EC0                    	mov es, ax
  1051                                  	
  1052 000006F1 8B4604                  	mov ax, [bp + 4]
  1053 000006F4 8B1E[0500]              	mov bx, [dimWidth]
  1054 000006F8 F7E3                    	mul bx
  1055 000006FA 89C7                    	mov di, ax; 71 x 320 
  1056                                  	
  1057 000006FC B320                    	mov bl, 0x20 ;blue
  1058 000006FE B70E                    	mov bh, 0x0E ;yellow
  1059                                  	
  1060 00000700 B204                    	mov dl, 0x04 ;red
  1061 00000702 B600                    	mov dh, 0x00 ;black
  1062                                  	
  1063                                  	;row1
  1064 00000704 89FE                    	mov si, di ;storing di
  1065 00000706 83C71C                  	add di, 28
  1066                                  	
  1067 00000709 26881D                  	mov [es:di], bl
  1068 0000070C 47                      	inc di
  1069 0000070D 26881D                  	mov [es:di], bl
  1070 00000710 47                      	inc di
  1071 00000711 268815                  	mov [es:di], dl
  1072 00000714 47                      	inc di
  1073 00000715 268815                  	mov [es:di], dl
  1074                                  	
  1075 00000718 89F7                    	mov di, si
  1076 0000071A 81C74001                	add di, 320
  1077 0000071E 83C71C                  	add di, 28
  1078                                  	
  1079 00000721 26881D                  	mov [es:di], bl
  1080 00000724 47                      	inc di
  1081 00000725 26881D                  	mov [es:di], bl
  1082 00000728 47                      	inc di
  1083 00000729 268815                  	mov [es:di], dl
  1084 0000072C 47                      	inc di
  1085 0000072D 268815                  	mov [es:di], dl
  1086 00000730 47                      	inc di
  1087                                  	
  1088                                  
  1089 00000731 89FE                    	mov si, di ;storing di
  1090                                  	
  1091                                  	;row2
  1092 00000733 81C73A01                	add di, 314
  1093 00000737 26881D                  	mov [es:di], bl
  1094 0000073A 47                      	inc di
  1095 0000073B 26881D                  	mov [es:di], bl
  1096 0000073E 47                      	inc di
  1097 0000073F 26881D                  	mov [es:di], bl 
  1098 00000742 47                      	inc di
  1099 00000743 26881D                  	mov [es:di], bl
  1100 00000746 47                      	inc di
  1101 00000747 268815                  	mov [es:di], dl
  1102 0000074A 47                      	inc di
  1103 0000074B 268815                  	mov [es:di], dl
  1104 0000074E 47                      	inc di
  1105 0000074F 268815                  	mov [es:di], dl
  1106 00000752 47                      	inc di
  1107 00000753 268815                  	mov [es:di], dl
  1108                                  	
  1109 00000756 89F7                    	mov di, si
  1110 00000758 81C74001                	add di, 320
  1111                                  	
  1112 0000075C 81C73A01                	add di, 314
  1113 00000760 26881D                  	mov [es:di], bl
  1114 00000763 47                      	inc di
  1115 00000764 26881D                  	mov [es:di], bl
  1116 00000767 47                      	inc di
  1117 00000768 26881D                  	mov [es:di], bl
  1118 0000076B 47                      	inc di
  1119 0000076C 26881D                  	mov [es:di], bl
  1120 0000076F 47                      	inc di
  1121 00000770 268815                  	mov [es:di], dl
  1122 00000773 47                      	inc di
  1123 00000774 268815                  	mov [es:di], dl
  1124 00000777 47                      	inc di
  1125 00000778 268815                  	mov [es:di], dl
  1126 0000077B 47                      	inc di
  1127 0000077C 268815                  	mov [es:di], dl
  1128                                  	
  1129 0000077F 81C73601                	add di, 310
  1130 00000783 B012                    	mov al, 18
  1131 00000785 B403                    	mov ah, 3
  1132 00000787 89FE                    	mov si, di
  1133                                  	
  1134 00000789 B112                    	mov cl, 18
  1135                                  	r31:
  1136 0000078B 268835                  		mov [es:di], dh
  1137 0000078E 2688B54001              		mov [es:di + 320], dh
  1138 00000793 47                      		inc di
  1139 00000794 E2F5                    		loop r31
  1140                                  	
  1141 00000796 89F7                    	mov di, si
  1142 00000798 81C77E02                	add di, 638
  1143 0000079C 89FE                    	mov si, di
  1144                                  	
  1145                                  	
  1146 0000079E B104                    	mov cl, 4
  1147                                  	r41:
  1148 000007A0 268835                  		mov [es:di], dh
  1149 000007A3 2688B54001              		mov [es:di + 320], dh
  1150 000007A8 47                      		inc di
  1151 000007A9 E2F5                    		loop r41
  1152                                  		
  1153 000007AB B106                    	mov cl, 6
  1154                                  	r42:
  1155 000007AD 26C60507                		mov byte[es:di], 0x07
  1156 000007B1 26C685400107            		mov byte[es:di + 320], 0x07
  1157 000007B7 47                      		inc di
  1158 000007B8 E2F3                    		loop r42
  1159                                  	
  1160 000007BA B102                    	mov cl, 2
  1161                                  	r43:
  1162 000007BC 268835                  		mov [es:di], dh
  1163 000007BF 2688B54001              		mov [es:di + 320], dh
  1164 000007C4 47                      		inc di
  1165 000007C5 E2F5                    		loop r43
  1166                                  	
  1167 000007C7 B106                    	mov cl, 6
  1168                                  	r44:
  1169 000007C9 26C60507                		mov byte[es:di], 0x07
  1170 000007CD 26C685400107            		mov byte[es:di + 320], 0x07
  1171 000007D3 47                      		inc di
  1172 000007D4 E2F3                    		loop r44
  1173                                  	
  1174 000007D6 B104                    	mov cl, 4
  1175                                  	r45:
  1176 000007D8 268835                  		mov [es:di], dh
  1177 000007DB 2688B54001              		mov [es:di + 320], dh
  1178 000007E0 47                      		inc di
  1179 000007E1 E2F5                    		loop r45
  1180                                  		
  1181 000007E3 89F7                    	mov di, si
  1182 000007E5 81C77E02                	add di, 638
  1183 000007E9 89FE                    	mov si, di
  1184                                  	
  1185 000007EB B104                    	mov cl, 4
  1186                                  	r51:
  1187 000007ED 268835                  		mov [es:di], dh
  1188 000007F0 2688B54001              		mov [es:di + 320], dh
  1189 000007F5 47                      		inc di
  1190 000007F6 E2F5                    		loop r51
  1191                                  		
  1192 000007F8 B108                    	mov cl, 8
  1193                                  	r52:
  1194 000007FA 26C60507                		mov byte[es:di], 0x07
  1195 000007FE 26C685400107            		mov byte[es:di + 320], 0x07
  1196 00000804 47                      		inc di
  1197 00000805 E2F3                    		loop r52
  1198                                  		
  1199 00000807 B102                    	mov cl, 2
  1200                                  	r53:
  1201 00000809 268835                  		mov [es:di], dh
  1202 0000080C 2688B54001              		mov [es:di + 320], dh
  1203 00000811 47                      		inc di
  1204 00000812 E2F5                    		loop r53
  1205                                  		
  1206 00000814 B108                    	mov cl, 8
  1207                                  	r54:
  1208 00000816 26C60507                		mov byte[es:di], 0x07
  1209 0000081A 26C685400107            		mov byte[es:di + 320], 0x07
  1210 00000820 47                      		inc di
  1211 00000821 E2F3                    		loop r54
  1212                                  		
  1213 00000823 B104                    	mov cl, 4
  1214                                  	r55:
  1215 00000825 268835                  		mov [es:di], dh
  1216 00000828 2688B54001              		mov [es:di + 320], dh
  1217 0000082D 47                      		inc di
  1218 0000082E E2F5                    		loop r55
  1219                                  		
  1220 00000830 89F7                    	mov di, si
  1221 00000832 81C77A02                	add di, 634
  1222 00000836 89FE                    	mov si, di
  1223 00000838 B108                    	mov cl, 8
  1224                                  		
  1225                                  	r61:
  1226 0000083A 268835                  		mov [es:di], dh
  1227 0000083D 2688B54001              		mov [es:di + 320], dh
  1228 00000842 47                      		inc di
  1229 00000843 E2F5                    		loop r61
  1230                                  		
  1231                                  	
  1232 00000845 B10A                    	mov cl, 10
  1233                                  	r62:
  1234 00000847 26C60507                		mov byte[es:di], 0x07
  1235 0000084B 26C685400107            		mov byte[es:di + 320], 0x07
  1236 00000851 47                      		inc di
  1237 00000852 E2F3                    		loop r62
  1238                                  		
  1239 00000854 B102                    	mov cl, 2
  1240                                  	r63:
  1241 00000856 268835                  		mov [es:di], dh
  1242 00000859 2688B54001              		mov [es:di + 320], dh
  1243 0000085E 47                      		inc di
  1244 0000085F E2F5                    		loop r63
  1245                                  		
  1246 00000861 B10A                    	mov cl, 10
  1247                                  	r64:
  1248 00000863 26C60507                		mov byte[es:di], 0x07
  1249 00000867 26C685400107            		mov byte[es:di + 320], 0x07
  1250 0000086D 47                      		inc di
  1251 0000086E E2F3                    		loop r64
  1252                                  	
  1253 00000870 B104                    	mov cl, 4
  1254                                  	r65:
  1255 00000872 268835                  		mov [es:di], dh
  1256 00000875 2688B54001              		mov [es:di + 320], dh
  1257 0000087A 47                      		inc di
  1258 0000087B E2F5                    		loop r65
  1259                                  	
  1260                                  	
  1261 0000087D 89F7                    	mov di, si
  1262 0000087F 81C77802                	add di, 632
  1263 00000883 89FE                    	mov si, di
  1264 00000885 B12E                    	mov cl, 46
  1265                                  	r7:
  1266 00000887 268835                  		mov [es:di], dh
  1267 0000088A 2688B54001              		mov [es:di + 320], dh
  1268 0000088F 47                      		inc di
  1269 00000890 E2F5                    		loop r7
  1270                                  		
  1271 00000892 89F7                    	mov di, si
  1272 00000894 81C77C02                	add di, 636
  1273 00000898 89FE                    	mov si, di
  1274 0000089A B134                    	mov cl, 52
  1275                                  	
  1276                                  	r81:
  1277 0000089C 268835                  		mov [es:di], dh
  1278 0000089F 2688B54001              		mov [es:di + 320], dh
  1279 000008A4 47                      		inc di
  1280 000008A5 E2F5                    		loop r81
  1281                                  		
  1282 000008A7 89F7                    	mov di, si
  1283 000008A9 81C77E02                	add di, 638
  1284 000008AD 89FE                    	mov si, di
  1285 000008AF B108                    	mov cl, 8
  1286                                  	
  1287                                  	r91:
  1288 000008B1 268835                  		mov [es:di], dh
  1289 000008B4 2688B54001              		mov [es:di + 320], dh
  1290 000008B9 47                      		inc di
  1291 000008BA E2F5                    		loop r91
  1292                                  		
  1293 000008BC B104                    	mov cl, 4
  1294                                  	r92:
  1295 000008BE 26C60507                		mov byte[es:di], 0x07
  1296 000008C2 26C685400107            		mov byte[es:di + 320], 0x07
  1297 000008C8 47                      		inc di
  1298 000008C9 E2F3                    		loop r92
  1299                                  		
  1300 000008CB B11E                    	mov cl, 30
  1301                                  	r93:
  1302 000008CD 268835                  		mov [es:di], dh
  1303 000008D0 2688B54001              		mov [es:di + 320], dh
  1304 000008D5 47                      		inc di
  1305 000008D6 E2F5                    		loop r93
  1306                                  	
  1307 000008D8 B104                    	mov cl, 4
  1308                                  	r94:
  1309 000008DA 26C60507                		mov byte[es:di], 0x07
  1310 000008DE 26C685400107            		mov byte[es:di + 320], 0x07
  1311 000008E4 47                      		inc di
  1312 000008E5 E2F3                    		loop r94
  1313                                  		
  1314 000008E7 B106                    	mov cl, 6
  1315                                  	r95:
  1316 000008E9 268835                  		mov [es:di], dh
  1317 000008EC 2688B54001              		mov [es:di + 320], dh
  1318 000008F1 47                      		inc di
  1319 000008F2 E2F5                    		loop r95
  1320                                  		
  1321 000008F4 B102                    	mov cl, 2
  1322                                  	r96:
  1323 000008F6 268815                  		mov [es:di], dl
  1324 000008F9 2688954001              		mov [es:di + 320], dl
  1325 000008FE 47                      		inc di
  1326 000008FF E2F5                    		loop r96
  1327                                  		
  1328 00000901 B102                    	mov cl, 2
  1329                                  	r97:
  1330 00000903 26883D                  		mov [es:di], bh
  1331 00000906 2688BD4001              		mov [es:di + 320], bh
  1332 0000090B 47                      		inc di
  1333 0000090C E2F5                    		loop r97
  1334                                  		
  1335                                  			
  1336 0000090E 89F7                    	mov di, si
  1337 00000910 81C78002                	add di, 640
  1338 00000914 83C702                  	add di, 2
  1339 00000917 89FE                    	mov si, di
  1340 00000919 B104                    	mov cl, 4
  1341                                  	
  1342                                  	rA1:
  1343 0000091B 268835                  		mov [es:di], dh
  1344 0000091E 2688B54001              		mov [es:di + 320], dh
  1345 00000923 47                      		inc di
  1346 00000924 E2F5                    		loop rA1
  1347                                  	
  1348 00000926 B108                    	mov cl, 8
  1349                                  	rA2:
  1350 00000928 26C60507                		mov byte[es:di], 0x07
  1351 0000092C 26C685400107            		mov byte[es:di + 320], 0x07
  1352 00000932 47                      		inc di
  1353 00000933 E2F3                    		loop rA2
  1354                                  		
  1355 00000935 B11A                    	mov cl, 26
  1356                                  	rA3:
  1357 00000937 268835                  		mov [es:di], dh
  1358 0000093A 2688B54001              		mov [es:di + 320], dh
  1359 0000093F 47                      		inc di
  1360 00000940 E2F5                    		loop rA3
  1361                                  				
  1362 00000942 B108                    	mov cl, 8
  1363                                  	rA4:
  1364 00000944 26C60507                		mov byte[es:di], 0x07
  1365 00000948 26C685400107            		mov byte[es:di + 320], 0x07
  1366 0000094E 47                      		inc di
  1367 0000094F E2F3                    		loop rA4
  1368                                  		
  1369 00000951 B106                    	mov cl, 6
  1370                                  	rA5:
  1371 00000953 268835                  		mov [es:di], dh
  1372 00000956 2688B54001              		mov [es:di + 320], dh
  1373 0000095B 47                      		inc di
  1374 0000095C E2F5                    		loop rA5
  1375                                  		
  1376 0000095E 89F7                    	mov di, si
  1377 00000960 81C78402                	add di, 644
  1378 00000964 89FE                    	mov si, di
  1379 00000966 B108                    	mov cl, 8
  1380                                  	
  1381                                  	rB1:
  1382 00000968 26C60507                		mov byte[es:di], 0x07
  1383 0000096C 26C685400107            		mov byte[es:di + 320], 0x07
  1384 00000972 47                      		inc di
  1385 00000973 E2F3                    		loop rB1
  1386                                  		
  1387 00000975 83C71A                  	add di, 26
  1388 00000978 B108                    	mov cl, 8
  1389                                  	rB2:
  1390 0000097A 26C60507                		mov byte[es:di], 0x07
  1391 0000097E 26C685400107            		mov byte[es:di + 320], 0x07
  1392 00000984 47                      		inc di
  1393 00000985 E2F3                    		loop rB2
  1394                                  	
  1395 00000987 89F7                    	mov di, si
  1396 00000989 81C78002                	add di, 640
  1397 0000098D 83C702                  	add di, 2
  1398 00000990 B104                    	mov cl, 4
  1399                                  	rC1:
  1400 00000992 26C60507                		mov byte[es:di], 0x07
  1401 00000996 26C685400107            		mov byte[es:di + 320], 0x07
  1402 0000099C 47                      		inc di
  1403 0000099D E2F3                    		loop rC1
  1404                                  		
  1405 0000099F 83C71E                  	add di, 30
  1406 000009A2 B104                    	mov cl, 4
  1407                                  	rC2:
  1408 000009A4 26C60507                		mov byte[es:di], 0x07
  1409 000009A8 26C685400107            		mov byte[es:di + 320], 0x07
  1410 000009AE 47                      		inc di
  1411 000009AF E2F3                    		loop rC2
  1412                                  		
  1413                                  	
  1414 000009B1 5B                      	pop bx
  1415 000009B2 5A                      	pop dx
  1416 000009B3 5E                      	pop si
  1417 000009B4 59                      	pop cx
  1418 000009B5 5F                      	pop di
  1419 000009B6 58                      	pop ax
  1420 000009B7 07                      	pop es
  1421 000009B8 5D                      	pop bp
  1422 000009B9 C20200                  	ret 2
  1423                                  
  1424                                  
  1425                                  ReservedSpace:
  1426                                  	
  1427 000009BC 06                      	push es
  1428 000009BD 50                      	push ax
  1429 000009BE 57                      	push di
  1430 000009BF 53                      	push bx
  1431                                  
  1432 000009C0 B800A0                  	mov ax, 0xA000
  1433 000009C3 8EC0                    	mov es, ax
  1434                                  	
  1435 000009C5 A1[0900]                	mov ax, [foregroundEnd]
  1436 000009C8 BB4001                  	mov bx, 320
  1437                                  	
  1438 000009CB F7E3                    	mul bx
  1439                                  	
  1440 000009CD 89C7                    	mov di, ax	
  1441                                  	
  1442                                  	
  1443                                  	nextcharR: 
  1444 000009CF 26C60502                		mov byte [es:di], 0x02
  1445 000009D3 47                      		inc di
  1446 000009D4 81FF00FA                		cmp di, 64000
  1447 000009D8 75F5                    		jne nextcharR
  1448                                  		
  1449                                  	
  1450 000009DA E81800                  	call PrintBrick
  1451                                  	
  1452 000009DD 833E[3200]00            	cmp word [carrotRandom], 0
  1453 000009E2 7503                    	jne skipcarrotPrint
  1454                                  	
  1455 000009E4 E8A501                  	call PrintCarrot
  1456                                  	
  1457                                  	skipcarrotPrint:
  1458                                  	
  1459 000009E7 E86F01                  	call PrintRabbit
  1460                                  	
  1461 000009EA E8D201                  	call PrintScore
  1462                                  	
  1463 000009ED E80102                  	call PrintTimer
  1464                                  	
  1465                                  	
  1466 000009F0 5B                      	pop bx	
  1467 000009F1 5F                      	pop di
  1468 000009F2 58                      	pop ax
  1469 000009F3 07                      	pop es
  1470 000009F4 C3                      	ret
  1471                                  	
  1472                                  PrintBrick:
  1473 000009F5 06                      	push es
  1474 000009F6 50                      	push ax
  1475 000009F7 53                      	push bx
  1476 000009F8 51                      	push cx
  1477 000009F9 57                      	push di
  1478                                  	
  1479 000009FA B800A0                  	mov ax, 0xA000
  1480 000009FD 8EC0                    	mov es, ax
  1481                                  	
  1482 000009FF A1[0F00]                	mov ax, [brickStart1]
  1483 00000A02 8B1E[0500]              	mov bx, [dimWidth]
  1484 00000A06 F7E3                    	mul bx
  1485 00000A08 058200                  	add ax, 130 ;for centre
  1486 00000A0B 0306[1500]              	add ax, [brickmove1]
  1487                                  
  1488                                  	
  1489 00000A0F 89C7                    	mov di, ax
  1490 00000A11 B403                    	mov ah, 3
  1491                                  	
  1492                                  	
  1493                                  	b1:
  1494 00000A13 B93C00                  		mov cx, 60 ;length of brick
  1495 00000A16 A0[2100]                		mov byte al, [brickC1]
  1496 00000A19 F3AA                    		rep stosb
  1497 00000A1B 81C70401                		add di, 260
  1498 00000A1F FECC                    		dec ah
  1499 00000A21 75F0                    		jnz b1
  1500                                  		
  1501                                  	
  1502 00000A23 A1[1100]                	mov ax, [brickStart2]
  1503 00000A26 8B1E[0500]              	mov bx, [dimWidth]
  1504 00000A2A F7E3                    	mul bx
  1505 00000A2C 0306[1700]              	add ax, [brickmove2]
  1506 00000A30 058200                  	add ax, 130 ; for centre
  1507                                  	
  1508 00000A33 89C7                    	mov di, ax
  1509 00000A35 B403                    	mov ah, 3
  1510                                  	
  1511                                  	b2:
  1512 00000A37 B93C00                  		mov cx, 60 ;lenght of brick
  1513 00000A3A A0[2200]                		mov byte al, [brickC2]
  1514 00000A3D F3AA                    		rep stosb
  1515 00000A3F 81C70401                		add di, 260
  1516 00000A43 FECC                    		dec ah
  1517 00000A45 75F0                    		jnz b2
  1518                                  		
  1519                                  		
  1520 00000A47 A1[1300]                	mov ax, [brickStart3]
  1521 00000A4A 8B1E[0500]              	mov bx, [dimWidth]
  1522 00000A4E F7E3                    	mul bx
  1523 00000A50 0306[1900]              	add ax, [brickmove3]; for centre
  1524 00000A54 058200                  	add ax, 130
  1525                                  	
  1526 00000A57 89C7                    	mov di, ax
  1527 00000A59 B403                    	mov ah, 3
  1528                                  	
  1529                                  	b3:
  1530 00000A5B B93C00                  		mov cx, 60 ;lenght of brick
  1531 00000A5E A0[2300]                		mov byte al, [brickC3]
  1532 00000A61 F3AA                    		rep stosb
  1533 00000A63 81C70401                		add di, 260
  1534 00000A67 FECC                    		dec ah
  1535 00000A69 75F0                    		jnz b3
  1536                                  		
  1537 00000A6B 5F                      	pop di
  1538 00000A6C 59                      	pop cx
  1539 00000A6D 5B                      	pop bx
  1540 00000A6E 58                      	pop ax
  1541 00000A6F 07                      	pop es
  1542 00000A70 C3                      	ret
  1543                                  	
  1544                                  MoveBricks:
  1545 00000A71 50                      	push ax
  1546 00000A72 53                      	push bx
  1547                                  	
  1548 00000A73 E846FF                  	call ReservedSpace
  1549                                  
  1550 00000A76 8B1E[2600]              	mov bx, [brickSpeed]
  1551                                  	
  1552 00000A7A 803E[2100]37            	cmp byte [brickC1], 0x37 ;blue
  1553 00000A7F 7432                    	je exit1
  1554                                  	
  1555 00000A81 833E[1B00]00            	cmp word [brickflag1], 0
  1556 00000A86 7407                    	je add1
  1557 00000A88 833E[1B00]01            	cmp word [brickflag1], 1
  1558 00000A8D 7413                    	je minus1
  1559                                  	
  1560                                  	add1:
  1561 00000A8F 011E[1500]              	add word[brickmove1], bx
  1562 00000A93 833E[1500]28            	cmp word[brickmove1], 40
  1563 00000A98 7E06                    	jle rightcheck1
  1564 00000A9A C706[1B00]0100          		mov word[brickflag1], 1
  1565                                  	rightcheck1:
  1566 00000AA0 EB11                    	jmp exit1
  1567                                  	
  1568                                  	minus1:
  1569 00000AA2 291E[1500]              	sub word[brickmove1], bx
  1570 00000AA6 833E[1500]D8            	cmp word[brickmove1], -40
  1571 00000AAB 7D06                    	jge exit1
  1572 00000AAD C706[1B00]0000          		mov word[brickflag1], 0
  1573                                  	
  1574                                  	exit1:
  1575                                  	
  1576                                  	
  1577 00000AB3 803E[2200]37            	cmp byte [brickC2], 0x37
  1578 00000AB8 7432                    	je exit2
  1579                                  	
  1580 00000ABA 833E[1D00]00            	cmp word [brickflag2], 0
  1581 00000ABF 7407                    	je add2
  1582 00000AC1 833E[1D00]01            	cmp word [brickflag2], 1
  1583 00000AC6 7413                    	je minus2
  1584                                  	
  1585                                  	add2:
  1586 00000AC8 011E[1700]              	add word[brickmove2], bx
  1587 00000ACC 833E[1700]28            	cmp word[brickmove2], 40
  1588 00000AD1 7E06                    	jle rightcheck2
  1589 00000AD3 C706[1D00]0100          		mov word[brickflag2], 1
  1590                                  	rightcheck2:
  1591 00000AD9 EB11                    	jmp exit2
  1592                                  	
  1593                                  	minus2:
  1594 00000ADB 291E[1700]              	sub word[brickmove2], bx
  1595 00000ADF 833E[1700]D8            	cmp word[brickmove2], -40
  1596 00000AE4 7D06                    	jge exit2
  1597 00000AE6 C706[1D00]0000          		mov word[brickflag2], 0
  1598                                  	
  1599                                  	exit2:
  1600                                  	
  1601                                  	
  1602 00000AEC 803E[2300]37            	cmp byte [brickC3], 0x37
  1603 00000AF1 743C                    	je setBlueBrickFlag
  1604                                  	
  1605 00000AF3 833E[1F00]00            	cmp word [brickflag3], 0
  1606 00000AF8 7407                    	je add3
  1607 00000AFA 833E[1F00]01            	cmp word [brickflag3], 1
  1608 00000AFF 7417                    	je minus3
  1609                                  	
  1610                                  	add3:
  1611 00000B01 011E[1900]              	add word[brickmove3], bx
  1612 00000B05 011E[2E00]              	add word[rabbitMove], bx
  1613 00000B09 833E[1900]28            	cmp word[brickmove3], 40
  1614 00000B0E 7E06                    	jle rightcheck3
  1615 00000B10 C706[1F00]0100          		mov word[brickflag3], 1
  1616                                  	rightcheck3:
  1617 00000B16 EB3E                    	jmp exit3
  1618                                  	
  1619                                  	minus3:
  1620 00000B18 291E[1900]              	sub word[brickmove3], bx
  1621 00000B1C 291E[2E00]              	sub word[rabbitMove], bx
  1622 00000B20 833E[1900]D8            	cmp word[brickmove3], -40
  1623 00000B25 7D2F                    	jge exit3
  1624 00000B27 C706[1F00]0000          		mov word[brickflag3], 0
  1625 00000B2D EB27                    		jmp exit3
  1626                                  	
  1627                                  	
  1628                                  	setBlueBrickFlag:
  1629 00000B2F 833E[2800]01            	cmp word [blueBrickFlag], 1
  1630 00000B34 7411                    	je checkBlueBrickFlag
  1631 00000B36 C706[2800]0100          		mov word [blueBrickFlag], 1
  1632 00000B3C A1[4400]                		mov word ax, [tickcount]
  1633 00000B3F 83C003                  		add ax, 3
  1634 00000B42 A3[2A00]                		mov word [blueBrickCount], ax
  1635 00000B45 EB0F                    		jmp exit3
  1636                                  	
  1637                                  	checkBlueBrickFlag:
  1638 00000B47 A1[4400]                		mov word ax, [tickcount]
  1639 00000B4A 3B06[2A00]              		cmp word ax, [blueBrickCount]
  1640 00000B4E 7C06                    		jl exit3
  1641 00000B50 C706[4A00]0100          		mov word [gameEnd], 1
  1642                                  	
  1643                                  		
  1644                                  	exit3:
  1645                                  	
  1646 00000B56 5B                      	pop bx
  1647 00000B57 58                      	pop ax
  1648 00000B58 C3                      	ret
  1649                                  
  1650                                  	
  1651                                  PrintRabbit:
  1652 00000B59 06                      	push es
  1653 00000B5A 50                      	push ax
  1654 00000B5B 53                      	push bx
  1655 00000B5C 51                      	push cx
  1656 00000B5D 57                      	push di
  1657                                  	
  1658 00000B5E B800A0                  	mov ax, 0xA000
  1659 00000B61 8EC0                    	mov es, ax
  1660                                  	
  1661 00000B63 A1[2C00]                	mov ax, [rabbitStart]
  1662 00000B66 8B1E[0500]              	mov bx, [dimWidth]
  1663 00000B6A F7E3                    	mul bx
  1664 00000B6C 0306[2E00]              	add ax, [rabbitMove]
  1665 00000B70 059100                  	add ax, 145; for centre
  1666                                  	
  1667 00000B73 89C7                    	mov di, ax
  1668 00000B75 B40F                    	mov ah, 15
  1669                                  	
  1670                                  	r1:
  1671 00000B77 B91400                  		mov cx, 20 ;length of rabbit
  1672 00000B7A B00F                    		mov al, 0x0F
  1673 00000B7C F3AA                    		rep stosb
  1674 00000B7E 81C72C01                		add di, 300
  1675 00000B82 FECC                    		dec ah
  1676 00000B84 75F1                    		jnz r1
  1677                                  		
  1678 00000B86 5F                      	pop di
  1679 00000B87 59                      	pop cx
  1680 00000B88 5B                      	pop bx
  1681 00000B89 58                      	pop ax
  1682 00000B8A 07                      	pop es
  1683 00000B8B C3                      	ret
  1684                                  	
  1685                                  PrintCarrot:
  1686                                  	
  1687 00000B8C 06                      	push es
  1688 00000B8D 50                      	push ax
  1689 00000B8E 53                      	push bx
  1690 00000B8F 51                      	push cx
  1691 00000B90 57                      	push di
  1692                                  	
  1693 00000B91 B800A0                  	mov ax, 0xA000
  1694 00000B94 8EC0                    	mov es, ax
  1695                                  	
  1696 00000B96 A1[3000]                	mov ax, [carrotStart]
  1697 00000B99 8B1E[0500]              	mov bx, [dimWidth]
  1698 00000B9D F7E3                    	mul bx
  1699 00000B9F 059D00                  	add ax, 157; for centre
  1700                                  	
  1701 00000BA2 0306[3400]              	add ax, [carrotMoveRand]
  1702 00000BA6 89C7                    	mov di, ax
  1703 00000BA8 B403                    	mov ah, 3
  1704                                  	
  1705                                  	c1:
  1706 00000BAA B90500                  		mov cx, 5 ;length of carrot
  1707 00000BAD B02A                    		mov al, 0x2A
  1708 00000BAF F3AA                    		rep stosb
  1709 00000BB1 81C73B01                		add di, 315
  1710 00000BB5 FECC                    		dec ah
  1711 00000BB7 75F1                    		jnz c1
  1712                                  		
  1713                                  		
  1714 00000BB9 5F                      	pop di
  1715 00000BBA 59                      	pop cx
  1716 00000BBB 5B                      	pop bx
  1717 00000BBC 58                      	pop ax
  1718 00000BBD 07                      	pop es
  1719 00000BBE C3                      	ret
  1720                                  	
  1721                                  PrintScore:
  1722 00000BBF 06                      	push es
  1723 00000BC0 50                      	push ax
  1724 00000BC1 53                      	push bx
  1725 00000BC2 51                      	push cx
  1726 00000BC3 52                      	push dx
  1727                                  	
  1728 00000BC4 B413                    	mov ah, 0x13   ;string printing
  1729 00000BC6 B001                    	mov al, 1
  1730 00000BC8 B700                    	mov bh, 0
  1731 00000BCA B30F                    	mov bl, 0x0F
  1732 00000BCC BA1F00                  	mov dx, 0x001F
  1733 00000BCF B90600                  	mov cx, 6
  1734 00000BD2 0E                      	push cs
  1735 00000BD3 07                      	pop es
  1736 00000BD4 BD[4E01]                	mov bp, scoreP
  1737 00000BD7 CD10                    	int 0x10 ;message print
  1738                                  	
  1739                                  	;score
  1740 00000BD9 B82500                  	mov ax, 0x25 ;col
  1741 00000BDC 50                      	push ax
  1742                                  		
  1743 00000BDD B80000                  	mov ax, 0x00 ;row
  1744 00000BE0 50                      	push ax
  1745                                  	
  1746 00000BE1 B00F                    	mov al, 0x0F
  1747 00000BE3 50                      	push ax
  1748                                  
  1749 00000BE4 FF36[4000]              	push word [score]
  1750                                  
  1751 00000BE8 E812F9                  	call printnum ; print tick count
  1752                                  	
  1753 00000BEB 5A                      	pop dx
  1754 00000BEC 59                      	pop cx
  1755 00000BED 5B                      	pop bx
  1756 00000BEE 58                      	pop ax
  1757 00000BEF 07                      	pop es
  1758 00000BF0 C3                      	ret
  1759                                  	
  1760                                  PrintTimer:
  1761 00000BF1 06                      	push es
  1762 00000BF2 60                      	pusha
  1763                                  	
  1764 00000BF3 B413                    	mov ah, 0x13   ;string printing
  1765 00000BF5 B001                    	mov al, 1
  1766 00000BF7 B700                    	mov bh, 0
  1767 00000BF9 B30F                    	mov bl, 0x0F
  1768 00000BFB BA0000                  	mov dx, 0x0000
  1769 00000BFE B90600                  	mov cx, 6
  1770 00000C01 0E                      	push cs
  1771 00000C02 07                      	pop es
  1772 00000C03 BD[5401]                	mov bp, timeP
  1773 00000C06 CD10                    	int 0x10 ;message print
  1774                                  	
  1775                                  	
  1776                                  	;seconds
  1777 00000C08 B80600                  	mov ax, 0x06 ;col
  1778 00000C0B 50                      	push ax
  1779                                  		
  1780 00000C0C B80000                  	mov ax, 0x00 ;row
  1781 00000C0F 50                      	push ax
  1782                                  	
  1783 00000C10 B00F                    	mov al, 0x0F
  1784 00000C12 50                      	push ax
  1785                                  
  1786 00000C13 2EFF36[4400]            	push word [cs:tickcount]
  1787                                  
  1788 00000C18 E8E2F8                  	call printnum ; print tick count
  1789                                  	
  1790                                  	
  1791 00000C1B 61                      	popa
  1792 00000C1C 07                      	pop es
  1793 00000C1D C3                      	ret
  1794                                  
  1795                                  PrintIntro:
  1796 00000C1E 60                      	pusha
  1797 00000C1F 06                      	push es
  1798                                  	
  1799 00000C20 E839F5                  	call clrscr
  1800                                  	
  1801 00000C23 B413                    	mov ah, 0x13   ;string printing
  1802 00000C25 B001                    	mov al, 1
  1803 00000C27 B700                    	mov bh, 0
  1804 00000C29 B307                    	mov bl, 7
  1805 00000C2B BA0009                  	mov dx, 0x0900
  1806 00000C2E B91700                  	mov cx, 23
  1807 00000C31 0E                      	push cs
  1808 00000C32 07                      	pop es
  1809 00000C33 BD[4E00]                	mov bp, prompt1
  1810 00000C36 CD10                    	int 0x10 ;message print
  1811                                  	
  1812 00000C38 B92800                  	mov cx, 40
  1813 00000C3B B413                    	mov ah, 0x13   ;string printing
  1814 00000C3D B001                    	mov al, 1
  1815 00000C3F B700                    	mov bh, 0
  1816 00000C41 B307                    	mov bl, 7
  1817 00000C43 BA000B                  	mov dx, 0x0B00
  1818 00000C46 0E                      	push cs
  1819 00000C47 07                      	pop es
  1820 00000C48 BD[6600]                	mov bp, prompt2
  1821 00000C4B CD10                    	int 0x10 ;message print
  1822                                  	
  1823 00000C4D B91500                  	mov cx, 21
  1824 00000C50 B413                    	mov ah, 0x13   ;string printing
  1825 00000C52 B001                    	mov al, 1
  1826 00000C54 B700                    	mov bh, 0
  1827 00000C56 B307                    	mov bl, 7
  1828 00000C58 BA000D                  	mov dx, 0x0D00
  1829 00000C5B 0E                      	push cs
  1830 00000C5C 07                      	pop es
  1831 00000C5D BD[8F00]                	mov bp, prompt3
  1832 00000C60 CD10                    	int 0x10 ;message print
  1833                                  	
  1834 00000C62 B92400                  	mov cx, 36
  1835 00000C65 B413                    	mov ah, 0x13   ;string printing
  1836 00000C67 B001                    	mov al, 1
  1837 00000C69 B700                    	mov bh, 0
  1838 00000C6B B307                    	mov bl, 7
  1839 00000C6D BA000F                  	mov dx, 0x0F00
  1840 00000C70 0E                      	push cs
  1841 00000C71 07                      	pop es
  1842 00000C72 BD[A500]                	mov bp, prompt4
  1843 00000C75 CD10                    	int 0x10 ;message print
  1844                                  	
  1845 00000C77 B90E00                  	mov cx, 14
  1846 00000C7A B413                    	mov ah, 0x13   ;string printing
  1847 00000C7C B001                    	mov al, 1
  1848 00000C7E B700                    	mov bh, 0
  1849 00000C80 B307                    	mov bl, 7
  1850 00000C82 BA0316                  	mov dx, 0x1603
  1851 00000C85 0E                      	push cs
  1852 00000C86 07                      	pop es
  1853 00000C87 BD[D900]                	mov bp, prompt6
  1854 00000C8A CD10                    	int 0x10 ;message print
  1855                                  	
  1856 00000C8C B90E00                  	mov cx, 14
  1857 00000C8F B413                    	mov ah, 0x13   ;string printing
  1858 00000C91 B001                    	mov al, 1
  1859 00000C93 B700                    	mov bh, 0
  1860 00000C95 B307                    	mov bl, 7
  1861 00000C97 BA0317                  	mov dx, 0x1703
  1862 00000C9A 0E                      	push cs
  1863 00000C9B 07                      	pop es
  1864 00000C9C BD[CA00]                	mov bp, prompt5
  1865 00000C9F CD10                    	int 0x10 ;message print
  1866                                  	
  1867                                  
  1868 00000CA1 07                      	pop es
  1869 00000CA2 61                      	popa
  1870 00000CA3 C3                      	ret
  1871                                  	
  1872                                  PrintOutro:
  1873 00000CA4 60                      	pusha
  1874                                  	
  1875 00000CA5 B90A00                  	mov cx, 10
  1876 00000CA8 B413                    	mov ah, 0x13   ;string printing
  1877 00000CAA B001                    	mov al, 1
  1878 00000CAC B700                    	mov bh, 0
  1879 00000CAE B307                    	mov bl, 7
  1880 00000CB0 BA0F0B                  	mov dx, 0x0B0F
  1881 00000CB3 0E                      	push cs
  1882 00000CB4 07                      	pop es
  1883 00000CB5 BD[E800]                	mov bp, prompt7
  1884 00000CB8 CD10                    	int 0x10 ;message print
  1885                                  	
  1886 00000CBA B90700                  	mov cx, 7
  1887 00000CBD B413                    	mov ah, 0x13   ;string printing
  1888 00000CBF B001                    	mov al, 1
  1889 00000CC1 B700                    	mov bh, 0
  1890 00000CC3 B307                    	mov bl, 7
  1891 00000CC5 BA0F0D                  	mov dx, 0x0D0F
  1892 00000CC8 0E                      	push cs
  1893 00000CC9 07                      	pop es
  1894 00000CCA BD[F300]                	mov bp, prompt8
  1895 00000CCD CD10                    	int 0x10 ;message print
  1896                                  	
  1897 00000CCF 6A15                    	push 0x15
  1898 00000CD1 6A0D                    	push 0x0D
  1899 00000CD3 6A0F                    	push 0x0F
  1900                                  	
  1901 00000CD5 FF36[4000]              	push word [score]
  1902 00000CD9 E821F8                  	call printnum
  1903                                  	
  1904 00000CDC B92100                  	mov cx, 33
  1905 00000CDF B413                    	mov ah, 0x13   ;string printing
  1906 00000CE1 B001                    	mov al, 1
  1907 00000CE3 B700                    	mov bh, 0
  1908 00000CE5 B307                    	mov bl, 7
  1909 00000CE7 BA040F                  	mov dx, 0x0F04
  1910 00000CEA 0E                      	push cs
  1911 00000CEB 07                      	pop es
  1912 00000CEC BD[FB00]                	mov bp, prompt10
  1913 00000CEF CD10                    	int 0x10 ;message print
  1914                                  		
  1915                                  	
  1916 00000CF1 61                      	popa
  1917 00000CF2 C3                      	ret
  1918                                  
  1919                                  PrintConfirmm:
  1920                                  
  1921 00000CF3 60                      	pusha
  1922 00000CF4 06                      	push es
  1923                                  	
  1924 00000CF5 2EC706[4800]0100        	mov word [cs:escape], 1
  1925 00000CFC E85DF4                  	call clrscr
  1926                                  	
  1927 00000CFF B93000                  	mov cx, 48
  1928 00000D02 B413                    	mov ah, 0x13   ;string printing
  1929 00000D04 B001                    	mov al, 1
  1930 00000D06 B700                    	mov bh, 0
  1931 00000D08 B307                    	mov bl, 7
  1932 00000D0A BA000D                  	mov dx, 0x0D00
  1933 00000D0D 0E                      	push cs
  1934 00000D0E 07                      	pop es
  1935 00000D0F BD[1D01]                	mov bp, prompt9
  1936 00000D12 CD10                    	int 0x10 ;message print
  1937                                  	
  1938                                  
  1939 00000D14 07                      	pop es
  1940 00000D15 61                      	popa
  1941 00000D16 C3                      	ret
  1942                                  
  1943                                  start:
  1944                                  	
  1945                                  	; mov cx, 2000
  1946                                  	; mov di, 0
  1947                                  	; mov ax, 0Xb800
  1948                                  	; mov es, ax
  1949                                  	
  1950                                  ; ll2:	
  1951                                  ; mov ax, [es:di]
  1952                                  	; mov word[buffer1+di], ax
  1953                                  	; add di,2
  1954                                  	; loop ll2
  1955                                  	;graphic mode
  1956 00000D17 B81300                  	mov  ax, 0x0013
  1957 00000D1A CD10                    	int 0x10
  1958                                  	
  1959                                  	;Introdution screen
  1960 00000D1C E8FFFE                  	call PrintIntro
  1961                                  	
  1962 00000D1F B90400                  	mov cx, 4
  1963                                  	dell:
  1964 00000D22 E891F4                  		call delay
  1965 00000D25 E2FB                    		loop dell
  1966                                  	
  1967 00000D27 E84BF8                  	call PrintStartScreen
  1968                                  	
  1969 00000D2A E867F7                  	call setkbisr
  1970                                  	
  1971 00000D2D E8A8F7                  	call setTimer
  1972                                  
  1973                                  	
  1974                                  	 infiniteLoop:
  1975 00000D30 833E[4A00]01            		cmp word [gameEnd], 1
  1976 00000D35 7422                    		je end
  1977 00000D37 833E[4800]01            		cmp word [escape], 1
  1978 00000D3C 7416                    		je skipanim
  1979 00000D3E E8FCF7                  			call PrintAnimation
  1980 00000D41 833E[4A00]01            		cmp word [gameEnd], 1
  1981 00000D46 7411                    		je end
  1982 00000D48 833E[4800]01            		cmp word [escape], 1
  1983 00000D4D 7405                    		je skipanim	
  1984 00000D4F E81FFD                  			call MoveBricks
  1985 00000D52 EBDC                    			jmp infiniteLoop
  1986                                  		skipanim:
  1987 00000D54 E826F4                  			call clrscr3b
  1988 00000D57 EBD7                    	 jmp infiniteLoop
  1989                                  
  1990                                  end:
  1991 00000D59 E800F4                  	call clrscr
  1992 00000D5C E845FF                  	call PrintOutro
  1993                                  	
  1994 00000D5F 31C0                    	xor ax, ax
  1995 00000D61 8EC0                    	mov es, ax
  1996                                  	
  1997                                  	
  1998                                  	;unhook keyboard
  1999 00000D63 A1[3800]                	mov ax, [oldisr1] ; read old offset in ax
  2000 00000D66 8B1E[3A00]              	mov bx, [oldisr1+2] ; read old segment in bx
  2001 00000D6A FA                      	cli ; disable interrupts
  2002 00000D6B 26A32400                	mov [es:9*4], ax ; restore old offset from ax
  2003 00000D6F 26891E2600              	mov [es:9*4+2], bx ; restore old segment from bx
  2004 00000D74 FB                      	sti
  2005                                  	
  2006                                  	
  2007                                  	;unhook timer
  2008 00000D75 A1[3C00]                	mov ax, [oldisr2] ; read old offset in ax
  2009 00000D78 8B1E[3E00]              	mov bx, [oldisr2+2] ; read old segment in bx
  2010 00000D7C FA                      	cli ;disable interrupts
  2011 00000D7D 26A32000                	mov [es:8*4], ax ; restore old offset from ax
  2012 00000D81 26891E2200              	mov [es:8*4+2], bx ; restore old segment from bx
  2013 00000D86 FB                      	sti
  2014                                  	
  2015 00000D87 B90400                  	mov cx, 4
  2016                                  	dell2:
  2017 00000D8A E829F4                  		call delay
  2018 00000D8D E2FB                    		loop dell2
  2019                                  	
  2020                                  	;back to text mode
  2021 00000D8F B80300                  	mov ax, 0x0003
  2022 00000D92 CD10                    	int 0x10
  2023                                  	
  2024                                  	; mov cx, 2000
  2025                                  	; mov di, 0
  2026                                  	; mov ax, 0Xb800
  2027                                  	; mov es, ax
  2028                                  
  2029                                  ; ll3:	
  2030                                  	; mov ax, word[buffer1+di]
  2031                                  	; mov [es:di],ax
  2032                                  	; add di,2
  2033                                  	; loop ll3
  2034                                  	
  2035 00000D94 B8004C                  	mov ax, 0x4c00
  2036 00000D97 CD21                    	int 0x21
